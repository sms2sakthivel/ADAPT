
--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/main.go ---
package main

import (
	_ "github.com/sms2sakthivel/order-manager/docs"
	"github.com/sms2sakthivel/order-manager/orders"
)

func main() {
	// Step 1: Create a New Order Service Application
	app := orders.NewApp()

	// Step 2: Start Server and Listen on the Port 8001
	app.Listen(":8003")
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/docs/docs.go ---
// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns basic information about the Order Service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Order Service Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/carts": {
            "get": {
                "description": "Retrieve a list of all carts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Get All Carts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.CartResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new cart to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Create a New Cart",
                "parameters": [
                    {
                        "description": "Cart details",
                        "name": "cart",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CartCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.CartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            }
        },
        "/carts/{id}": {
            "get": {
                "description": "Retrieve a cart by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Get Cart by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cart ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CartResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify details of an existing cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Update an Existing Cart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cart ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated cart details",
                        "name": "cart",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CartUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a cart by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Carts"
                ],
                "summary": "Delete a Cart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cart ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "Retrieve a list of all orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get All Orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.OrderResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new order to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create a New Order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.OrderCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "description": "Retrieve a order by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get Order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OrderResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify details of an existing order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update an Existing Order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.OrderUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a order by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Delete a Order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_gofiber_fiber_v2.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_gofiber_fiber_v2.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.CartCreateRequest": {
            "type": "object",
            "required": [
                "cart_items",
                "user_id"
            ],
            "properties": {
                "cart_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CartItemRequest"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CartItemRequest": {
            "type": "object",
            "required": [
                "discount",
                "product_id",
                "quantity"
            ],
            "properties": {
                "discount": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "model.CartItemResponse": {
            "type": "object",
            "properties": {
                "cart_item_id": {
                    "type": "integer"
                },
                "discount": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "model.CartResponse": {
            "type": "object",
            "properties": {
                "cart_id": {
                    "type": "integer"
                },
                "cart_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CartItemResponse"
                    }
                },
                "cart_value": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CartUpdateRequest": {
            "type": "object",
            "required": [
                "cart_id",
                "cart_items",
                "user_id"
            ],
            "properties": {
                "cart_id": {
                    "type": "integer"
                },
                "cart_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CartItemRequest"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.OrderCreateRequest": {
            "type": "object",
            "required": [
                "cart_id"
            ],
            "properties": {
                "cart_id": {
                    "type": "integer"
                }
            }
        },
        "model.OrderResponse": {
            "type": "object",
            "properties": {
                "cart": {
                    "$ref": "#/definitions/model.CartResponse"
                },
                "cart_id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                }
            }
        },
        "model.OrderUpdateRequest": {
            "type": "object",
            "properties": {
                "cart_id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/app.go ---
package orders

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/sms2sakthivel/order-manager/orders/database"
	"github.com/sms2sakthivel/order-manager/orders/model"
	"github.com/sms2sakthivel/order-manager/orders/repository"
	"github.com/sms2sakthivel/order-manager/orders/routes"
	"github.com/sms2sakthivel/order-manager/orders/service"
)

func NewApp() *fiber.App {
	// Step 1: Connect to the database
	database.Connect()

	// Step 2: Auto-migrate Order schema
	model.Automigrate(database.DB)

	// Step 3: Initialize repository, service, and app
	repo := &repository.GormOrderRepository{DB: database.DB}
	service := &service.OrderService{Repo: repo}
	service.InitCartService(database.DB)

	app := fiber.New()

	// Step 4: Enable Logger middleware with timing
	app.Use(logger.New(logger.Config{
		Format: "${time} - ${latency} - ${status} - ${method} ${path}\n",
	}))

	// Step 5: Register routes
	routes.RegisterRoutes(app, service)
	return app
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/database/sqlite3.go ---
package database

import (
	"log"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var DB *gorm.DB

// Connect initializes the SQLite database connection
func Connect() {
	db, err := gorm.Open(sqlite.Open("../orders.db"), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	DB = db
	log.Println("SQLite Database connected!")
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/repository/cartiteminterface.go ---
package repository

import "github.com/sms2sakthivel/order-manager/orders/model"

type CartItemRepository interface {
	GetAllCartItemss() ([]model.CartItem, error)
	GetCartItemByID(id uint) (*model.CartItem, error)
	CreateCartItem(order *model.CartItem) error
	CreateCartItems(order []*model.CartItem) error
	UpdateCartItem(order *model.CartItem) error
	DeleteCartItem(id uint) error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/repository/orderinterface.go ---
package repository

import (
	"github.com/sms2sakthivel/order-manager/orders/model"
)

type OrderRepository interface {
	GetAllOrders() ([]model.Order, error)
	GetOrderByID(id uint) (*model.Order, error)
	CreateOrder(order *model.Order) error
	UpdateOrder(order *model.Order) error
	DeleteOrder(id uint) error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/repository/cartrepository.go ---
package repository

import (
	"github.com/sms2sakthivel/order-manager/orders/model"
	"gorm.io/gorm"
)

type GormCartRepository struct {
	CartItemRepo GormCartItemRepository
	DB           *gorm.DB
}

func (gcr *GormCartRepository) Init(db *gorm.DB) {
	gcr.DB = db
	gcr.CartItemRepo = GormCartItemRepository{DB: db}
}

func (repo *GormCartRepository) GetAllCarts() ([]model.Cart, error) {
	var carts []model.Cart
	err := repo.DB.Preload("CartItems").Find(&carts).Error
	return carts, err
}

func (repo *GormCartRepository) GetCartByID(id uint) (*model.Cart, error) {
	var cart model.Cart
	err := repo.DB.Preload("CartItems").First(&cart, id).Error
	return &cart, err
}

func (repo *GormCartRepository) CreateCart(cart *model.Cart) error {
	err := repo.CartItemRepo.CreateCartItems(&cart.CartItems)
	if err != nil {
		return err
	}
	return repo.DB.Create(cart).Error
}

func (repo *GormCartRepository) UpdateCart(cart *model.Cart) error {
	return repo.DB.Save(cart).Error
}

func (repo *GormCartRepository) DeleteCart(id uint) error {
	return repo.DB.Delete(&model.Cart{}, id).Error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/repository/cartinterface.go ---
package repository

import (
	"github.com/sms2sakthivel/order-manager/orders/model"
	"gorm.io/gorm"
)

type CartRepository interface {
	GetAllCarts() ([]model.Cart, error)
	GetCartByID(id uint) (*model.Cart, error)
	CreateCart(order *model.Cart) error
	UpdateCart(order *model.Cart) error
	DeleteCart(id uint) error
	Init(db *gorm.DB)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/repository/orderrepository.go ---
package repository

import (
	"github.com/sms2sakthivel/order-manager/orders/model"
	"gorm.io/gorm"
)

type GormOrderRepository struct {
	DB *gorm.DB
}

func (repo *GormOrderRepository) GetAllOrders() ([]model.Order, error) {
	var orders []model.Order
	err := repo.DB.Preload("Cart").Preload("Cart.CartItems").Find(&orders).Error
	return orders, err
}

func (repo *GormOrderRepository) GetOrderByID(id uint) (*model.Order, error) {
	var order model.Order
	err := repo.DB.Preload("Cart").Preload("Cart.CartItems").First(&order, id).Error
	return &order, err
}

func (repo *GormOrderRepository) CreateOrder(order *model.Order) error {
	var cart model.Cart
	err := repo.DB.Preload("CartItems").First(&cart, order.CartID).Error
	if err != nil {
		return err
	}
	order.Cart = cart
	return repo.DB.Create(order).Error
}

func (repo *GormOrderRepository) UpdateOrder(order *model.Order) error {
	var cart model.Cart = model.Cart{}
	err := repo.DB.Preload("Cart.CartItems").First(&cart, order.CartID).Error
	if err != nil {
		return err
	}
	order.Cart = cart
	return repo.DB.Save(order).Error
}

func (repo *GormOrderRepository) DeleteOrder(id uint) error {
	err := repo.DB.Delete(&model.Order{ID: id}).Error
	return err
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/repository/cartitemrepository.go ---
package repository

import (
	"github.com/sms2sakthivel/order-manager/orders/model"
	"gorm.io/gorm"
)

type GormCartItemRepository struct {
	DB *gorm.DB
}

func (repo *GormCartItemRepository) GetAllCartItems() ([]model.CartItem, error) {
	var cartItems []model.CartItem
	err := repo.DB.Find(&cartItems).Error
	return cartItems, err
}

func (repo *GormCartItemRepository) GetCartItemByID(id uint) (*model.CartItem, error) {
	var cartItems model.CartItem
	err := repo.DB.First(&cartItems, id).Error
	return &cartItems, err
}

func (repo *GormCartItemRepository) CreateCartItem(cartItem *model.CartItem) error {
	return repo.DB.Create(cartItem).Error
}

func (repo *GormCartItemRepository) CreateCartItems(cartItems *[]model.CartItem) error {
	return repo.DB.Create(cartItems).Error
}

func (repo *GormCartItemRepository) UpdateCartItem(cartItem *model.CartItem) error {
	return repo.DB.Save(cartItem).Error
}

func (repo *GormCartItemRepository) DeleteCartItem(id uint) error {
	return repo.DB.Delete(&model.CartItem{}, id).Error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/cartapi.go ---
package model

// Cart API Models
type CartCreateRequest struct {
	UserID    uint              `json:"user_id" binding:"required"`
	CartItems []CartItemRequest `json:"cart_items" binding:"required"`
}

type CartUpdateRequest struct {
	ID        uint              `json:"cart_id" binding:"required"`
	UserID    uint              `json:"user_id" binding:"required"`
	CartItems []CartItemRequest `json:"cart_items" binding:"required"`
}

type CartResponse struct {
	ID        uint               `json:"cart_id"`
	CartItems []CartItemResponse `json:"cart_items"`
	UserID    uint               `json:"user_id"`
	CartValue uint               `json:"cart_value"`
}

func (ccr *CartCreateRequest) GetDBObject() *Cart {
	var cartItems []CartItem
	for _, item := range ccr.CartItems {
		cartItems = append(cartItems, CartItem{ProductID: item.ProductID, Quantity: item.Quantity, Discount: item.Discount})
	}
	return &Cart{UserID: ccr.UserID, CartItems: cartItems}
}

func (cur *CartUpdateRequest) GetDBObject() *Cart {
	var cartItems []CartItem
	for _, item := range cur.CartItems {
		cartItems = append(cartItems, CartItem{ProductID: item.ProductID, Quantity: item.Quantity, Discount: item.Discount})
	}
	return &Cart{ID: cur.ID, UserID: cur.UserID, CartItems: cartItems}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/orderdb.go ---
package model

import "gorm.io/gorm"

// Order DB Model
type Order struct {
	gorm.Model
	ID     uint `gorm:"primaryKey"`
	CartID uint `gorm:"not null"`

	// Foreign key constraints
	Cart Cart `gorm:"forignKey:CartID;reference:ID;constraint:OnDelete:CASCADE;OnUpdate:CASCADE;not null"`
}

func (order *Order) GetAPIResponseObject() *OrderResponse {
	return &OrderResponse{ID: order.ID, CartID: order.CartID, Cart: *order.Cart.GetAPIResponseObject()}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/cartitemapi.go ---
package model

// CartItem API Models
type CartItemRequest struct {
	ProductID uint `json:"product_id" binding:"required"`
	Quantity  int  `json:"quantity" binding:"required"`
	Discount  int  `json:"discount" binding:"required"`
}

type CartItemResponse struct {
	ID        uint `json:"cart_item_id"`
	ProductID uint `json:"product_id"`
	Quantity  int  `json:"quantity"`
	Discount  int  `json:"discount"`
}

func (cir *CartItemRequest) GetDBObject() *CartItem {
	return &CartItem{ProductID: cir.ProductID, Quantity: cir.Quantity, Discount: cir.Discount}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/cartitemdb.go ---
package model

import "gorm.io/gorm"

// CartItem DB model
type CartItem struct {
	gorm.Model
	ID        uint `gorm:"primaryKey"`
	ProductID uint `gorm:"not null"`
	Quantity  int  `gorm:"not null"`
	Discount  int  `gorm:"not null"`
}

func (cartItem *CartItem) GetAPIResponseObject() *CartItemResponse {
	return &CartItemResponse{ID: cartItem.ID, ProductID: cartItem.ProductID, Discount: cartItem.Discount, Quantity: cartItem.Quantity}
}

type CartItemsMap struct {
	gorm.Model
	CartID     uint `gorm:"primaryKey"` // Foreign key to Cart
	CartItemID uint `gorm:"primaryKey"` // Foreign key to CartItem

	// Foreign key constraints
	Cart     Cart     `gorm:"foreignKey:CartID;references:ID;constraint:OnDelete:CASCADE;OnUpdate:CASCADE;not null"`
	CartItem CartItem `gorm:"foreignKey:CartItemID;references:ID;constraint:OnDelete:CASCADE;OnUpdate:CASCADE;not null"`
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/orderapi.go ---
package model

// Order API Models
type OrderCreateRequest struct {
	CartID uint `json:"cart_id" binding:"required"`
}

type OrderUpdateRequest struct {
	ID     uint `json:"order_id"`
	CartID uint `json:"cart_id"`
}

type OrderResponse struct {
	ID     uint         `json:"order_id"`
	CartID uint         `json:"cart_id"`
	Cart   CartResponse `json:"cart,omitempty"`
}

func (ocr *OrderCreateRequest) GetOrderDBObject() *Order {
	return &Order{CartID: ocr.CartID}
}

func (our *OrderUpdateRequest) GetOrderDBObject() *Order {
	return &Order{ID: our.ID, CartID: our.CartID}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/migrate.go ---
package model

import (
	"gorm.io/gorm"
)

func Automigrate(DB *gorm.DB) error {
	return DB.AutoMigrate(&CartItem{}, &Cart{}, &Order{})
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/cartdb.go ---
package model

import "gorm.io/gorm"

// Cart DB Model
type Cart struct {
	gorm.Model
	ID        uint       `gorm:"primaryKey"`
	UserID    uint       `gorm:"not null"`
	CartItems []CartItem `gorm:"many2many:cart_items_map;"`
	CartValue uint       `gorm:"not null"`
}

func (cart *Cart) GetAPIResponseObject() *CartResponse {
	var cartItemResponses []CartItemResponse = []CartItemResponse{}
	for _, cartItem := range cart.CartItems {
		cartItemResponses = append(cartItemResponses, *cartItem.GetAPIResponseObject())
	}
	return &CartResponse{ID: cart.ID, CartItems: cartItemResponses, UserID: cart.UserID, CartValue: cart.CartValue}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/model/dependentmodels.go ---
package model

type UserResponse struct {
	ID       uint   `json:"user_id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Username string `json:"user_name"`
}

type ProductResponse struct {
	ID          uint   `json:"product_id"`
	Name        string `json:"product_name"`
	Brand       string `json:"brand"`
	Category    string `json:"category"`
	SubCategory string `json:"sub_category"`
	Price       uint   `json:"price"`
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/service/orderservice.go ---
package service

import (
	"github.com/sms2sakthivel/order-manager/orders/model"
	"github.com/sms2sakthivel/order-manager/orders/repository"
	"gorm.io/gorm"
)

type OrderService struct {
	CartService CartService
	Repo        repository.OrderRepository
}

func (os *OrderService) InitCartService(db *gorm.DB) {
	os.CartService.Init(db)
}
func (s *OrderService) GetOrders() ([]model.OrderResponse, error) {
	var orders []model.OrderResponse = []model.OrderResponse{}
	dbOrders, err := s.Repo.GetAllOrders()
	if err != nil {
		return nil, err
	}
	for _, order := range dbOrders {
		orders = append(orders, *order.GetAPIResponseObject())
	}
	return orders, nil
}

func (s *OrderService) GetOrder(id uint) (*model.OrderResponse, error) {
	dbOrder, err := s.Repo.GetOrderByID(id)
	if err != nil {
		return nil, err
	}
	return dbOrder.GetAPIResponseObject(), nil
}

func (s *OrderService) CreateOrder(orderReq *model.OrderCreateRequest) (*model.OrderResponse, error) {
	order := orderReq.GetOrderDBObject()
	err := s.Repo.CreateOrder(order)
	return order.GetAPIResponseObject(), err
}

func (s *OrderService) UpdateOrder(orderReq *model.OrderUpdateRequest) (*model.OrderResponse, error) {
	order := orderReq.GetOrderDBObject()
	err := s.Repo.UpdateOrder(order)
	return order.GetAPIResponseObject(), err
}

func (s *OrderService) DeleteOrder(id uint) error {
	return s.Repo.DeleteOrder(id)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/service/dependentservices.go ---
package service

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/gofiber/fiber/v3/client"
	"github.com/sms2sakthivel/order-manager/orders/model"
)

func GetUserByID(id uint) (*model.UserResponse, error) {
	cli := client.New()
	cli.SetTimeout(10 * time.Second)

	// Send a GET request
	resp, err := cli.Get(fmt.Sprintf("http://127.0.0.1:8001/users/%d", id))
	if err != nil {
		return nil, err
	}

	fmt.Printf("Status: %d\n", resp.StatusCode())
	fmt.Printf("Body: %s\n", string(resp.Body()))
	if resp.StatusCode() != 200 {
		return nil, err
	}
	var userResponse model.UserResponse
	err = json.Unmarshal(resp.Body(), &userResponse)
	if err != nil {
		return nil, err
	}
	return &userResponse, nil
}

func GetProductByID(id uint) (*model.ProductResponse, error) {
	cli := client.New()
	cli.SetTimeout(10 * time.Second)

	// Send a GET request
	resp, err := cli.Get(fmt.Sprintf("http://127.0.0.1:8002/products/%d", id))
	if err != nil {
		return nil, err
	}

	fmt.Printf("Status: %d\n", resp.StatusCode())
	fmt.Printf("Body: %s\n", string(resp.Body()))
	if resp.StatusCode() != 200 {
		return nil, err
	}
	var productResponse model.ProductResponse
	err = json.Unmarshal(resp.Body(), &productResponse)
	if err != nil {
		return nil, err
	}
	return &productResponse, nil
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/service/cartservice.go ---
package service

import (
	"github.com/sms2sakthivel/order-manager/orders/model"
	"github.com/sms2sakthivel/order-manager/orders/repository"
	"gorm.io/gorm"
)

type CartService struct {
	Repo repository.CartRepository
}

func (cs *CartService) Init(db *gorm.DB) {
	cs.Repo = &repository.GormCartRepository{}
	cs.Repo.Init(db)
}

func (s *CartService) GetCarts() ([]model.CartResponse, error) {
	dbCarts, err := s.Repo.GetAllCarts()
	if err != nil {
		return nil, err
	}
	var carts []model.CartResponse = []model.CartResponse{}
	for _, cart := range dbCarts {
		carts = append(carts, *cart.GetAPIResponseObject())
	}
	return carts, nil
}

func (s *CartService) GetCart(id uint) (*model.CartResponse, error) {
	dbCart, err := s.Repo.GetCartByID(id)
	if err != nil {
		return nil, err
	}
	return dbCart.GetAPIResponseObject(), err
}

func (s *CartService) CreateCart(cartReq *model.CartCreateRequest) (*model.CartResponse, error) {
	// Step 1: Check if the UserID is Valid
	_, err := GetUserByID(cartReq.UserID)
	if err != nil {
		return nil, err
	}
	cart := cartReq.GetDBObject()

	// Step 2: Check if all the ProductIDs are Valid
	var products map[uint]*model.ProductResponse = map[uint]*model.ProductResponse{}
	var productIds []uint = []uint{}
	for _, cartItem := range cart.CartItems {
		productIds = append(productIds, cartItem.ProductID)
	}
	for _, productID := range productIds {
		product, err := GetProductByID(productID)
		if err != nil {
			return nil, err
		}
		products[productID] = product
	}

	// Step 3: Calculate Total Cart Value
	var value uint = 0
	for _, item := range cart.CartItems {
		value += ((products[item.ProductID].Price * (100 - uint(item.Discount))) / 100) * uint(item.Quantity)
	}
	cart.CartValue = value
	err = s.Repo.CreateCart(cart)
	return cart.GetAPIResponseObject(), err
}

func (s *CartService) UpdateCart(cartReq *model.CartUpdateRequest) (*model.CartResponse, error) {
	_, err := GetUserByID(cartReq.UserID)
	if err != nil {
		return nil, err
	}
	cart := cartReq.GetDBObject()
	var productIds []uint = []uint{}
	for _, cartItem := range cart.CartItems {
		productIds = append(productIds, cartItem.ProductID)
	}
	for _, productID := range productIds {
		_, err = GetProductByID(productID)
		if err != nil {
			return nil, err
		}
	}
	err = s.Repo.UpdateCart(cart)
	return cart.GetAPIResponseObject(), err
}

func (s *CartService) DeleteCart(id uint) error {
	return s.Repo.DeleteCart(id)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/routes/orderroutes.go ---
package routes

import (
	"strconv"

	"github.com/gofiber/fiber/v2"
	"github.com/sms2sakthivel/order-manager/orders/model"
	"github.com/sms2sakthivel/order-manager/orders/service"
)

// OrderServiceInfo returns information about the Order Service
//
// @Summary      Order Service Info
// @Description  Returns basic information about the Order Service
// @Tags         General
// @Accept       json
// @Produce      json
// @Success      200  {object}  map[string]interface{}
// @Router       / [get]
func OrderServiceInfo(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{"message": "Order Service"})
}

// GetAllOrders retrieves all orders
//
// @Summary      Get All Orders
// @Description  Retrieve a list of all orders
// @Tags         Orders
// @Accept       json
// @Produce      json
// @Success      200  {array}   model.OrderResponse
// @Failure      500  {object}  fiber.Error
// @Router       /orders [get]
func GetAllOrders(c *fiber.Ctx, service *service.OrderService) error {
	orders, err := service.GetOrders()
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(orders)
}

// GetOrderByID retrieves a order by their ID
//
// @Summary      Get Order by ID
// @Description  Retrieve a order by their ID
// @Tags         Orders
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "Order ID"
// @Success      200  {object}  model.OrderResponse
// @Failure      404  {object}  fiber.Error
// @Failure      500  {object}  fiber.Error
// @Router       /orders/{id} [get]
func GetOrderByID(c *fiber.Ctx, service *service.OrderService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	order, err := service.GetOrder(uint(id))
	if err != nil {
		return fiber.NewError(fiber.StatusNotFound, "Order not found")
	}
	return c.JSON(order)
}

// CreateOrder adds a new order
//
// @Summary      Create a New Order
// @Description  Add a new order to the system
// @Tags         Orders
// @Accept       json
// @Produce      json
// @Param        order  body      model.OrderCreateRequest  true  "Order details"
// @Success      201   {object}  model.OrderResponse
// @Failure      400   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /orders [post]
func CreateOrder(c *fiber.Ctx, service *service.OrderService) error {
	var orderReq model.OrderCreateRequest
	if err := c.BodyParser(&orderReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}
	order, err := service.CreateOrder(&orderReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.Status(fiber.StatusCreated).JSON(order)
}

// UpdateOrder modifies details of an existing order
//
// @Summary      Update an Existing Order
// @Description  Modify details of an existing order
// @Tags         Orders
// @Accept       json
// @Produce      json
// @Param        id    path      int         true  "Order ID"
// @Param        order  body      model.OrderUpdateRequest  true  "Updated order details"
// @Success      200   {object}  model.OrderResponse
// @Failure      400   {object}  fiber.Error
// @Failure      404   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /orders/{id} [put]
func UpdateOrder(c *fiber.Ctx, service *service.OrderService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	var orderReq model.OrderUpdateRequest
	if err := c.BodyParser(&orderReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}
	orderReq.ID = uint(id)
	order, err := service.UpdateOrder(&orderReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(order)
}

// DeleteOrder removes a order by their ID
//
// @Summary      Delete a Order
// @Description  Remove a order by their ID
// @Tags         Orders
// @Accept       json
// @Produce      json
// @Param        id   path  int  true  "Order ID"
// @Success      204
// @Failure      500  {object}  fiber.Error
// @Router       /orders/{id} [delete]
func DeleteOrder(c *fiber.Ctx, service *service.OrderService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	if err := service.DeleteOrder(uint(id)); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.SendStatus(fiber.StatusNoContent)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/routes/cartroutes.go ---
package routes

import (
	"strconv"

	"github.com/gofiber/fiber/v2"
	"github.com/sms2sakthivel/order-manager/orders/model"
	"github.com/sms2sakthivel/order-manager/orders/service"
)

// GetAllCarts retrieves all carts
//
// @Summary      Get All Carts
// @Description  Retrieve a list of all carts
// @Tags         Carts
// @Accept       json
// @Produce      json
// @Success      200  {array}   model.CartResponse
// @Failure      500  {object}  fiber.Error
// @Router       /carts [get]
func GetAllCarts(c *fiber.Ctx, service *service.CartService) error {
	carts, err := service.GetCarts()
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(carts)
}

// GetCartByID retrieves a cart by their ID
//
// @Summary      Get Cart by ID
// @Description  Retrieve a cart by their ID
// @Tags         Carts
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "Cart ID"
// @Success      200  {object}  model.CartResponse
// @Failure      404  {object}  fiber.Error
// @Failure      500  {object}  fiber.Error
// @Router       /carts/{id} [get]
func GetCartByID(c *fiber.Ctx, service *service.CartService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	cart, err := service.GetCart(uint(id))
	if err != nil {
		return fiber.NewError(fiber.StatusNotFound, "Cart not found")
	}
	return c.JSON(cart)
}

// CreateCart adds a new cart
//
// @Summary      Create a New Cart
// @Description  Add a new cart to the system
// @Tags         Carts
// @Accept       json
// @Produce      json
// @Param        cart  body      model.CartCreateRequest  true  "Cart details"
// @Success      201   {object}  model.CartResponse
// @Failure      400   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /carts [post]
func CreateCart(c *fiber.Ctx, service *service.CartService) error {
	var cartReq model.CartCreateRequest
	if err := c.BodyParser(&cartReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}
	cart, err := service.CreateCart(&cartReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.Status(fiber.StatusCreated).JSON(cart)
}

// UpdateCart modifies details of an existing cart
//
// @Summary      Update an Existing Cart
// @Description  Modify details of an existing cart
// @Tags         Carts
// @Accept       json
// @Produce      json
// @Param        id    path      int         true  "Cart ID"
// @Param        cart  body      model.CartUpdateRequest  true  "Updated cart details"
// @Success      200   {object}  model.CartResponse
// @Failure      400   {object}  fiber.Error
// @Failure      404   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /carts/{id} [put]
func UpdateCart(c *fiber.Ctx, service *service.CartService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	var cartReq model.CartUpdateRequest
	if err := c.BodyParser(&cartReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}
	cartReq.ID = uint(id)
	cart, err := service.UpdateCart(&cartReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(cart)
}

// DeleteCart removes a cart by their ID
//
// @Summary      Delete a Cart
// @Description  Remove a cart by their ID
// @Tags         Carts
// @Accept       json
// @Produce      json
// @Param        id   path  int  true  "Cart ID"
// @Success      204
// @Failure      500  {object}  fiber.Error
// @Router       /carts/{id} [delete]
func DeleteCart(c *fiber.Ctx, service *service.CartService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	if err := service.DeleteCart(uint(id)); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.SendStatus(fiber.StatusNoContent)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/order-manager/orders/routes/routes.go ---
package routes

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	"github.com/sms2sakthivel/order-manager/orders/service"
)

func RegisterRoutes(app *fiber.App, service *service.OrderService) {
	app.Get("/", OrderServiceInfo)
	app.Get("/swagger/*", swagger.HandlerDefault)

	// order endpoints
	app.Get("/orders", func(c *fiber.Ctx) error { return GetAllOrders(c, service) })
	app.Get("/orders/:id", func(c *fiber.Ctx) error { return GetOrderByID(c, service) })
	app.Post("/orders", func(c *fiber.Ctx) error { return CreateOrder(c, service) })
	app.Put("/orders/:id", func(c *fiber.Ctx) error { return UpdateOrder(c, service) })
	app.Delete("/orders/:id", func(c *fiber.Ctx) error { return DeleteOrder(c, service) })

	// cart endpoints
	app.Get("/carts", func(c *fiber.Ctx) error { return GetAllCarts(c, &service.CartService) })
	app.Get("/carts/:id", func(c *fiber.Ctx) error { return GetCartByID(c, &service.CartService) })
	app.Post("/carts", func(c *fiber.Ctx) error { return CreateCart(c, &service.CartService) })
	app.Put("/carts/:id", func(c *fiber.Ctx) error { return UpdateCart(c, &service.CartService) })
	app.Delete("/carts/:id", func(c *fiber.Ctx) error { return DeleteCart(c, &service.CartService) })
}

