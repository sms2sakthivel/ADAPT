
--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/main.go ---
package main

import (
	_ "github.com/sms2sakthivel/product-manager/docs"
	"github.com/sms2sakthivel/product-manager/products"
)

func main() {
	// Step 1: Create a New Product Service Application
	app := products.NewApp()

	// Step 2: Start Server and Listen on the Port 8001
	app.Listen(":8002")
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/app.go ---
package products

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/sms2sakthivel/product-manager/products/database"
	"github.com/sms2sakthivel/product-manager/products/model"
	"github.com/sms2sakthivel/product-manager/products/repository"
	"github.com/sms2sakthivel/product-manager/products/routes"
	"github.com/sms2sakthivel/product-manager/products/service"
)

func NewApp() *fiber.App {
	// Step 1: Connect to the database
	database.Connect()

	// Step 2: Auto-migrate Product schema
	database.DB.AutoMigrate(&model.Product{})

	// Step 3: Initialize repository, service, and app
	repo := &repository.GormProductRepository{DB: database.DB}
	service := &service.ProductService{Repo: repo}
	app := fiber.New()

	// Step 4: Enable Logger middleware with timing
	app.Use(logger.New(logger.Config{
		Format: "${time} - ${latency} - ${status} - ${method} ${path}\n",
	}))

	// Step 5: Register routes
	routes.RegisterRoutes(app, service)
	return app
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/database/sqlite3.go ---
package database

import (
	"log"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var DB *gorm.DB

// Connect initializes the SQLite database connection
func Connect() {
	db, err := gorm.Open(sqlite.Open("../products.db"), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	DB = db
	log.Println("SQLite Database connected!")
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/repository/productrepository.go ---
package repository

import (
	"github.com/sms2sakthivel/product-manager/products/model"
	"gorm.io/gorm"
)

type GormProductRepository struct {
	DB *gorm.DB
}

func (repo *GormProductRepository) GetAllProducts() ([]model.Product, error) {
	var products []model.Product
	err := repo.DB.Find(&products).Error
	return products, err
}

func (repo *GormProductRepository) GetProductByID(id uint) (*model.Product, error) {
	var product model.Product
	err := repo.DB.First(&product, id).Error
	return &product, err
}

func (repo *GormProductRepository) CreateProduct(product *model.Product) error {
	return repo.DB.Create(product).Error
}

func (repo *GormProductRepository) UpdateProduct(product *model.Product) error {
	return repo.DB.Save(product).Error
}

func (repo *GormProductRepository) DeleteProduct(id uint) error {
	return repo.DB.Delete(&model.Product{}, id).Error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/repository/productinterface.go ---
package repository

import (
	"github.com/sms2sakthivel/product-manager/products/model"
)

type ProductRepository interface {
	GetAllProducts() ([]model.Product, error)
	GetProductByID(id uint) (*model.Product, error)
	CreateProduct(Product *model.Product) error
	UpdateProduct(Product *model.Product) error
	DeleteProduct(id uint) error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/model/productdb.go ---
package model

import "gorm.io/gorm"

type Product struct {
	gorm.Model
	ID          uint   `gorm:"primaryKey"`
	Name        string `gorm:"not null"`
	Brand       string `gorm:"not null"`
	Category    string `gorm:"not null"`
	SubCategory string `gorm:"not null"`
	Price       uint   `gorm:"not null"`
}

func (product *Product) GetAPIResponseObject() *ProductResponse {
	return &ProductResponse{ID: product.ID, Name: product.Name, Brand: product.Brand, Category: product.Category, SubCategory: product.SubCategory, Price: product.Price}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/model/productapi.go ---
package model

type ProductCreateRequest struct {
	Name        string `json:"product_name"`
	Brand       string `json:"brand"`
	Category    string `json:"category"`
	SubCategory string `json:"sub_category"`
	Price       uint   `json:"price"`
}

type ProductUpdateRequest struct {
	ID          uint   `json:"product_id"`
	Name        string `json:"product_name"`
	Brand       string `json:"brand"`
	Category    string `json:"category"`
	SubCategory string `json:"sub_category"`
	Price       uint   `json:"price"`
}

type ProductResponse struct {
	ID          uint   `json:"product_id"`
	Name        string `json:"product_name"`
	Brand       string `json:"brand"`
	Category    string `json:"category"`
	SubCategory string `json:"sub_category"`
	Price       uint   `json:"price"`
}

func (pcr *ProductCreateRequest) GetDBObject() *Product {
	return &Product{Name: pcr.Name, Brand: pcr.Brand, Category: pcr.Category, SubCategory: pcr.SubCategory, Price: pcr.Price}
}

func (pur *ProductUpdateRequest) GetDBObject() *Product {
	return &Product{ID: pur.ID, Name: pur.Name, Brand: pur.Brand, Category: pur.Category, SubCategory: pur.SubCategory, Price: pur.Price}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/model/migrate.go ---
package model

import (
	"gorm.io/gorm"
)

func Automigrate(DB *gorm.DB) error {
	return DB.AutoMigrate(&Product{})
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/service/productservice.go ---
package service

import (
	"github.com/sms2sakthivel/product-manager/products/model"
	"github.com/sms2sakthivel/product-manager/products/repository"
)

type ProductService struct {
	Repo repository.ProductRepository
}

func (s *ProductService) GetProducts() ([]model.ProductResponse, error) {
	var products []model.ProductResponse = []model.ProductResponse{}
	dbProducts, err := s.Repo.GetAllProducts()
	if err != nil {
		return nil, err
	}
	for _, product := range dbProducts {
		products = append(products, *product.GetAPIResponseObject())
	}
	return products, nil
}

func (s *ProductService) GetProduct(id uint) (*model.ProductResponse, error) {
	dbProduct, err := s.Repo.GetProductByID(id)
	if err != nil {
		return nil, err
	}
	return dbProduct.GetAPIResponseObject(), nil
}

func (s *ProductService) CreateProduct(productReq *model.ProductCreateRequest) (*model.ProductResponse, error) {
	product := productReq.GetDBObject()
	err := s.Repo.CreateProduct(product)
	return product.GetAPIResponseObject(), err
}

func (s *ProductService) UpdateProduct(productReq *model.ProductUpdateRequest) (*model.ProductResponse, error) {
	product := productReq.GetDBObject()
	err := s.Repo.UpdateProduct(product)
	return product.GetAPIResponseObject(), err
}

func (s *ProductService) DeleteProduct(id uint) error {
	return s.Repo.DeleteProduct(id)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/products/routes/productroutes.go ---
package routes

import (
	"strconv"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	"github.com/sms2sakthivel/product-manager/products/model"
	"github.com/sms2sakthivel/product-manager/products/service"
)

func RegisterRoutes(app *fiber.App, service *service.ProductService) {
	app.Get("/", ProductServiceInfo)
	app.Get("/swagger/*", swagger.HandlerDefault)
	app.Get("/products", func(c *fiber.Ctx) error { return GetAllProducts(c, service) })
	app.Get("/products/:id", func(c *fiber.Ctx) error { return GetProductByID(c, service) })
	app.Post("/products", func(c *fiber.Ctx) error { return CreateProduct(c, service) })
	app.Put("/products/:id", func(c *fiber.Ctx) error { return UpdateProduct(c, service) })
	app.Delete("/products/:id", func(c *fiber.Ctx) error { return DeleteProduct(c, service) })
}

// ProductServiceInfo returns information about the Product Service
//
// @Summary      Product Service Info
// @Description  Returns basic information about the Product Service
// @Tags         General
// @Accept       json
// @Produce      json
// @Success      200  {object}  map[string]interface{}
// @Router       / [get]
func ProductServiceInfo(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{"message": "Product Service"})
}

// GetAllProducts retrieves all products
//
// @Summary      Get All Products
// @Description  Retrieve a list of all products
// @Tags         Products
// @Accept       json
// @Produce      json
// @Success      200  {array}   model.ProductResponse
// @Failure      500  {object}  fiber.Error
// @Router       /products [get]
func GetAllProducts(c *fiber.Ctx, service *service.ProductService) error {
	products, err := service.GetProducts()
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(products)
}

// GetProductByID retrieves a product by their ID
//
// @Summary      Get Product by ID
// @Description  Retrieve a product by their ID
// @Tags         Products
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "Product ID"
// @Success      200  {object}  model.ProductResponse
// @Failure      404  {object}  fiber.Error
// @Failure      500  {object}  fiber.Error
// @Router       /products/{id} [get]
func GetProductByID(c *fiber.Ctx, service *service.ProductService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	product, err := service.GetProduct(uint(id))
	if err != nil {
		return fiber.NewError(fiber.StatusNotFound, "Product not found")
	}
	return c.JSON(product)
}

// CreateProduct adds a new product
//
// @Summary      Create a New Product
// @Description  Add a new product to the system
// @Tags         Products
// @Accept       json
// @Produce      json
// @Param        product  body      model.ProductCreateRequest  true  "Product details"
// @Success      201   {object}  model.ProductResponse
// @Failure      400   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /products [post]
func CreateProduct(c *fiber.Ctx, service *service.ProductService) error {
	var productReq model.ProductCreateRequest
	if err := c.BodyParser(&productReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}

	product, err := service.CreateProduct(&productReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.Status(fiber.StatusCreated).JSON(product)
}

// UpdateProduct modifies details of an existing product
//
// @Summary      Update an Existing Product
// @Description  Modify details of an existing product
// @Tags         Products
// @Accept       json
// @Produce      json
// @Param        id    path      int         true  "Product ID"
// @Param        product  body      model.ProductUpdateRequest  true  "Updated product details"
// @Success      200   {object}  model.ProductResponse
// @Failure      400   {object}  fiber.Error
// @Failure      404   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /products/{id} [put]
func UpdateProduct(c *fiber.Ctx, service *service.ProductService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	var productReq model.ProductUpdateRequest
	if err := c.BodyParser(&productReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}
	productReq.ID = uint(id)
	product, err := service.UpdateProduct(&productReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(product)
}

// DeleteProduct removes a product by their ID
//
// @Summary      Delete a Product
// @Description  Remove a product by their ID
// @Tags         Products
// @Accept       json
// @Produce      json
// @Param        id   path  int  true  "Product ID"
// @Success      204
// @Failure      500  {object}  fiber.Error
// @Router       /products/{id} [delete]
func DeleteProduct(c *fiber.Ctx, service *service.ProductService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	if err := service.DeleteProduct(uint(id)); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.SendStatus(fiber.StatusNoContent)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/product-manager/docs/docs.go ---
// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns basic information about the Product Service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Product Service Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Retrieve a list of all products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get All Products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ProductResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new product to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a New Product",
                "parameters": [
                    {
                        "description": "Product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProductCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Retrieve a product by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get Product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProductResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify details of an existing product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update an Existing Product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProductUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a product by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete a Product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "fiber.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.ProductCreateRequest": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "sub_category": {
                    "type": "string"
                }
            }
        },
        "model.ProductResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "sub_category": {
                    "type": "string"
                }
            }
        },
        "model.ProductUpdateRequest": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "sub_category": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

