
--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/main.go ---
package main

import (
	_ "github.com/sms2sakthivel/user-manager/docs"
	"github.com/sms2sakthivel/user-manager/users"
)

func main() {
	// Step 1: Create a New User Service Application
	app := users.NewApp()

	// Step 2: Start Server and Listen on the Port 8001
	app.Listen(":8001")
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/docs/docs.go ---
// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns basic information about the User Service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "User Service Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieve a list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get All Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new user to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a New User",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify details of an existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update an Existing User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "fiber.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.UserCreateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "model.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "model.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/app.go ---
package users

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/sms2sakthivel/user-manager/users/database"
	"github.com/sms2sakthivel/user-manager/users/model"
	"github.com/sms2sakthivel/user-manager/users/repository"
	"github.com/sms2sakthivel/user-manager/users/routes"
	"github.com/sms2sakthivel/user-manager/users/service"
)

func NewApp() *fiber.App {
	// Step 1: Connect to the database
	database.Connect()

	// Step 2: Auto-migrate User schema
	model.Automigrate(database.DB)

	// Step 3: Initialize repository, service, and app
	repo := &repository.GormUserRepository{DB: database.DB}
	service := &service.UserService{Repo: repo}
	app := fiber.New()

	// Step 4: Enable Logger middleware with timing
	app.Use(logger.New(logger.Config{
		Format: "${time} - ${latency} - ${status} - ${method} ${path}\n",
	}))

	// Step 5: Register routes
	routes.RegisterRoutes(app, service)
	return app
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/database/sqlite3.go ---
package database

import (
	"log"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var DB *gorm.DB

// Connect initializes the SQLite database connection
func Connect() {
	db, err := gorm.Open(sqlite.Open("../users.db"), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	DB = db
	log.Println("SQLite Database connected!")
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/repository/userrepository.go ---
package repository

import (
	"github.com/sms2sakthivel/user-manager/users/model"
	"gorm.io/gorm"
)

type GormUserRepository struct {
	DB *gorm.DB
}

func (repo *GormUserRepository) GetAllUsers() ([]model.User, error) {
	var users []model.User
	err := repo.DB.Find(&users).Error
	return users, err
}

func (repo *GormUserRepository) GetUserByID(id uint) (*model.User, error) {
	var user model.User
	err := repo.DB.First(&user, id).Error
	return &user, err
}

func (repo *GormUserRepository) CreateUser(user *model.User) error {
	return repo.DB.Create(user).Error
}

func (repo *GormUserRepository) UpdateUser(user *model.User) error {
	return repo.DB.Save(user).Error
}

func (repo *GormUserRepository) DeleteUser(id uint) error {
	return repo.DB.Delete(&model.User{}, id).Error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/repository/userinterface.go ---
package repository

import (
	"github.com/sms2sakthivel/user-manager/users/model"
)

type UserRepository interface {
	GetAllUsers() ([]model.User, error)
	GetUserByID(id uint) (*model.User, error)
	CreateUser(user *model.User) error
	UpdateUser(user *model.User) error
	DeleteUser(id uint) error
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/model/userdb.go ---
package model

import "gorm.io/gorm"

type User struct {
	gorm.Model
	ID           uint   `gorm:"primaryKey"`
	Name         string `gorm:"not null"`
	Email        string `gorm:"unique;not null"`
	Username     string `gorm:"unique;not null"`
	PasswordHash string `gorm:"not null"`
}

func (user *User) GetAPIResponseObject() *UserResponse {
	return &UserResponse{ID: user.ID, Name: user.Name, Email: user.Email, Username: user.Username}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/model/userapi.go ---
package model

type UserCreateRequest struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Username string `json:"user_name"`
	Password string `json:"password"`
}

type UserUpdateRequest struct {
	ID       uint   `json:"user_id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Username string `json:"user_name"`
	Password string `json:"password"`
}

type UserResponse struct {
	ID       uint   `json:"user_id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Username string `json:"user_name"`
}

func (ucr *UserCreateRequest) GetDBObject() *User {
	return &User{Name: ucr.Name, Email: ucr.Email, Username: ucr.Username, PasswordHash: ucr.Password}
}

func (uur *UserUpdateRequest) GetDBObject() *User {
	return &User{ID: uur.ID, Name: uur.Name, Email: uur.Email, Username: uur.Username, PasswordHash: uur.Password}
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/model/migrate.go ---
package model

import (
	"gorm.io/gorm"
)

func Automigrate(DB *gorm.DB) error {
	return DB.AutoMigrate(&User{})
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/service/userservice.go ---
package service

import (
	"github.com/sms2sakthivel/user-manager/users/model"
	"github.com/sms2sakthivel/user-manager/users/repository"
)

type UserService struct {
	Repo repository.UserRepository
}

func (s *UserService) GetUsers() ([]model.UserResponse, error) {
	var users []model.UserResponse = []model.UserResponse{}
	dbUsers, err := s.Repo.GetAllUsers()
	if err != nil {
		return nil, err
	}
	for _, user := range dbUsers {
		users = append(users, *user.GetAPIResponseObject())
	}

	return users, nil
}

func (s *UserService) GetUser(id uint) (*model.UserResponse, error) {
	dbUser, err := s.Repo.GetUserByID(id)
	if err != nil {
		return nil, err
	}
	return dbUser.GetAPIResponseObject(), nil
}

func (s *UserService) CreateUser(userReq *model.UserCreateRequest) (*model.UserResponse, error) {
	user := userReq.GetDBObject()
	err := s.Repo.CreateUser(user)
	return user.GetAPIResponseObject(), err
}

func (s *UserService) UpdateUser(userReq *model.UserUpdateRequest) (*model.UserResponse, error) {
	user := userReq.GetDBObject()
	err := s.Repo.UpdateUser(user)
	return user.GetAPIResponseObject(), err
}

func (s *UserService) DeleteUser(id uint) error {
	return s.Repo.DeleteUser(id)
}


--- /Users/sakthivelganesan/Desktop/Workspace/MTech/Semester4/Dissertation/Implementation/ADAPT/user-manager/users/routes/userroutes.go ---
package routes

import (
	"strconv"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	"github.com/sms2sakthivel/user-manager/users/model"
	"github.com/sms2sakthivel/user-manager/users/service"
)

func RegisterRoutes(app *fiber.App, service *service.UserService) {
	app.Get("/", UserServiceInfo)
	app.Get("/swagger/*", swagger.HandlerDefault)
	app.Get("/users", func(c *fiber.Ctx) error { return GetAllUsers(c, service) })
	app.Get("/users/:id", func(c *fiber.Ctx) error { return GetUserByID(c, service) })
	app.Post("/users", func(c *fiber.Ctx) error { return CreateUser(c, service) })
	app.Put("/users/:id", func(c *fiber.Ctx) error { return UpdateUser(c, service) })
	app.Delete("/users/:id", func(c *fiber.Ctx) error { return DeleteUser(c, service) })
}

// UserServiceInfo returns information about the User Service
//
// @Summary      User Service Info
// @Description  Returns basic information about the User Service
// @Tags         General
// @Accept       json
// @Produce      json
// @Success      200  {object}  map[string]interface{}
// @Router       / [get]
func UserServiceInfo(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{"message": "User Service"})
}

// GetAllUsers retrieves all users
//
// @Summary      Get All Users
// @Description  Retrieve a list of all users
// @Tags         Users
// @Accept       json
// @Produce      json
// @Success      200  {array}   model.UserResponse
// @Failure      500  {object}  fiber.Error
// @Router       /users [get]
func GetAllUsers(c *fiber.Ctx, service *service.UserService) error {
	users, err := service.GetUsers()
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(users)
}

// GetUserByID retrieves a user by their ID
//
// @Summary      Get User by ID
// @Description  Retrieve a user by their ID
// @Tags         Users
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "User ID"
// @Success      200  {object}  model.UserResponse
// @Failure      404  {object}  fiber.Error
// @Failure      500  {object}  fiber.Error
// @Router       /users/{id} [get]
func GetUserByID(c *fiber.Ctx, service *service.UserService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	user, err := service.GetUser(uint(id))
	if err != nil {
		return fiber.NewError(fiber.StatusNotFound, "User not found")
	}
	return c.JSON(user)
}

// CreateUser adds a new user
//
// @Summary      Create a New User
// @Description  Add a new user to the system
// @Tags         Users
// @Accept       json
// @Produce      json
// @Param        user  body      model.UserCreateRequest  true  "User details"
// @Success      201   {object}  model.UserResponse
// @Failure      400   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /users [post]
func CreateUser(c *fiber.Ctx, service *service.UserService) error {
	var userReq model.UserCreateRequest
	if err := c.BodyParser(&userReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}
	user, err := service.CreateUser(&userReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.Status(fiber.StatusCreated).JSON(user)
}

// UpdateUser modifies details of an existing user
//
// @Summary      Update an Existing User
// @Description  Modify details of an existing user
// @Tags         Users
// @Accept       json
// @Produce      json
// @Param        id    path      int         true  "User ID"
// @Param        user  body      model.UserUpdateRequest  true  "Updated user details"
// @Success      200   {object}  model.UserResponse
// @Failure      400   {object}  fiber.Error
// @Failure      404   {object}  fiber.Error
// @Failure      500   {object}  fiber.Error
// @Router       /users/{id} [put]
func UpdateUser(c *fiber.Ctx, service *service.UserService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	var userReq model.UserUpdateRequest
	if err := c.BodyParser(&userReq); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, "Invalid input")
	}
	userReq.ID = uint(id)
	user, err := service.UpdateUser(&userReq)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.JSON(user)
}

// DeleteUser removes a user by their ID
//
// @Summary      Delete a User
// @Description  Remove a user by their ID
// @Tags         Users
// @Accept       json
// @Produce      json
// @Param        id   path  int  true  "User ID"
// @Success      204
// @Failure      500  {object}  fiber.Error
// @Router       /users/{id} [delete]
func DeleteUser(c *fiber.Ctx, service *service.UserService) error {
	id, _ := strconv.Atoi(c.Params("id"))
	if err := service.DeleteUser(uint(id)); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}
	return c.SendStatus(fiber.StatusNoContent)
}

